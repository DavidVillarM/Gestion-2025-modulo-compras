// <auto-generated />
using System;
using System.Collections.Generic;
using System.Net;
using BackendApp.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BackendApp.Migrations.Postgres
{
    [DbContext(typeof(PostgresContext))]
    partial class PostgresContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "auth", "aal_level", new[] { "aal1", "aal2", "aal3" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "auth", "code_challenge_method", new[] { "s256", "plain" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "auth", "factor_status", new[] { "unverified", "verified" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "auth", "factor_type", new[] { "totp", "webauthn", "phone" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "auth", "one_time_token_type", new[] { "confirmation_token", "reauthentication_token", "recovery_token", "email_change_token_new", "email_change_token_current", "phone_change_token" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "realtime", "action", new[] { "INSERT", "UPDATE", "DELETE", "TRUNCATE", "ERROR" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "realtime", "equality_op", new[] { "eq", "neq", "lt", "lte", "gt", "gte", "in" });
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "extensions", "pg_stat_statements");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "extensions", "pgcrypto");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "extensions", "pgjwt");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "extensions", "uuid-ossp");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "graphql", "pg_graphql");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "vault", "supabase_vault");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "vector");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence<int>("seq_schema_version", "graphql")
                .IsCyclic();

            modelBuilder.Entity("BackendApp.Models.AjustesStock", b =>
                {
                    b.Property<long>("IdAjuste")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_ajuste");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("IdAjuste"));

                    b.Property<DateOnly?>("Fecha")
                        .HasColumnType("date")
                        .HasColumnName("fecha");

                    b.Property<long?>("IdPersonal")
                        .HasColumnType("bigint")
                        .HasColumnName("id_personal");

                    b.Property<string>("Motivo")
                        .HasColumnType("text")
                        .HasColumnName("motivo");

                    b.Property<string>("TipoAjuste")
                        .HasColumnType("text")
                        .HasColumnName("tipo_ajuste");

                    b.HasKey("IdAjuste")
                        .HasName("ajustes_stock_pkey");

                    b.HasIndex("IdPersonal");

                    b.ToTable("ajustes_stock", (string)null);
                });

            modelBuilder.Entity("BackendApp.Models.Asiento", b =>
                {
                    b.Property<long>("IdAsiento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_asiento");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("IdAsiento"));

                    b.Property<DateOnly?>("Fecha")
                        .HasColumnType("date")
                        .HasColumnName("fecha");

                    b.Property<long>("IdNota")
                        .HasColumnType("bigint")
                        .HasColumnName("id_nota");

                    b.Property<long>("IdOrden")
                        .HasColumnType("bigint")
                        .HasColumnName("id_orden");

                    b.Property<long>("IdProveedor")
                        .HasColumnType("bigint")
                        .HasColumnName("id_proveedor");

                    b.Property<decimal?>("MontoTotal")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("monto_total");

                    b.HasKey("IdAsiento")
                        .HasName("asientos_pkey");

                    b.HasIndex("IdNota");

                    b.HasIndex("IdOrden");

                    b.HasIndex("IdProveedor");

                    b.ToTable("asientos", (string)null);
                });

            modelBuilder.Entity("BackendApp.Models.AuditLogEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("InstanceId")
                        .HasColumnType("uuid")
                        .HasColumnName("instance_id");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("ip_address")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("Payload")
                        .HasColumnType("json")
                        .HasColumnName("payload");

                    b.HasKey("Id")
                        .HasName("audit_log_entries_pkey");

                    b.HasIndex(new[] { "InstanceId" }, "audit_logs_instance_id_idx");

                    b.ToTable("audit_log_entries", "auth", t =>
                        {
                            t.HasComment("Auth: Audit trail for user actions.");
                        });
                });

            modelBuilder.Entity("BackendApp.Models.BajasProducto", b =>
                {
                    b.Property<long>("IdBajaProducto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_baja_producto");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("IdBajaProducto"));

                    b.Property<int?>("Cantidad")
                        .HasColumnType("integer")
                        .HasColumnName("cantidad");

                    b.Property<long?>("IdProducto")
                        .HasColumnType("bigint")
                        .HasColumnName("id_producto");

                    b.Property<string>("Motivo")
                        .HasColumnType("text")
                        .HasColumnName("motivo");

                    b.HasKey("IdBajaProducto")
                        .HasName("bajas_producto_pkey");

                    b.HasIndex("IdProducto");

                    b.ToTable("bajas_producto", (string)null);
                });

            modelBuilder.Entity("BackendApp.Models.Bucket", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.PrimitiveCollection<List<string>>("AllowedMimeTypes")
                        .HasColumnType("text[]")
                        .HasColumnName("allowed_mime_types");

                    b.Property<bool?>("AvifAutodetection")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("avif_autodetection");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long?>("FileSizeLimit")
                        .HasColumnType("bigint")
                        .HasColumnName("file_size_limit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid")
                        .HasColumnName("owner")
                        .HasComment("Field is deprecated, use owner_id instead");

                    b.Property<string>("OwnerId")
                        .HasColumnType("text")
                        .HasColumnName("owner_id");

                    b.Property<bool?>("Public")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("public");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("buckets_pkey");

                    b.HasIndex(new[] { "Name" }, "bname")
                        .IsUnique();

                    b.ToTable("buckets", "storage");
                });

            modelBuilder.Entity("BackendApp.Models.CategoriaProveedor", b =>
                {
                    b.Property<long>("IdCategoriaProveedor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_categoria_proveedor");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("IdCategoriaProveedor"));

                    b.Property<string>("Estado")
                        .HasColumnType("text")
                        .HasColumnName("estado");

                    b.Property<long?>("IdCategoria")
                        .HasColumnType("bigint")
                        .HasColumnName("id_categoria");

                    b.Property<long?>("IdProveedor")
                        .HasColumnType("bigint")
                        .HasColumnName("id_proveedor");

                    b.HasKey("IdCategoriaProveedor")
                        .HasName("categoria_proveedor_pkey");

                    b.HasIndex("IdCategoria");

                    b.HasIndex("IdProveedor");

                    b.ToTable("categoria_proveedor", (string)null);
                });

            modelBuilder.Entity("BackendApp.Models.Categorium", b =>
                {
                    b.Property<long>("IdCategoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_categoria");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("IdCategoria"));

                    b.Property<string>("Descripcion")
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.Property<string>("Nombre")
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.HasKey("IdCategoria")
                        .HasName("categoria_pkey");

                    b.ToTable("categoria", (string)null);
                });

            modelBuilder.Entity("BackendApp.Models.ContadorFactura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("IdProveedor")
                        .HasColumnType("bigint")
                        .HasColumnName("id_proveedor");

                    b.Property<string>("Prefijo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("prefijo")
                        .HasDefaultValueSql("'F001'::text");

                    b.Property<int>("UltimoNumero")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("ultimo_numero");

                    b.HasKey("Id")
                        .HasName("contador_factura_pkey");

                    b.HasIndex(new[] { "IdProveedor" }, "proveedor_unico")
                        .IsUnique();

                    b.ToTable("contador_factura", (string)null);
                });

            modelBuilder.Entity("BackendApp.Models.DetalleAjusteStock", b =>
                {
                    b.Property<long>("IdDetalle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_detalle");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("IdDetalle"));

                    b.Property<int?>("Cantidad")
                        .HasColumnType("integer")
                        .HasColumnName("cantidad");

                    b.Property<long?>("IdAjuste")
                        .HasColumnType("bigint")
                        .HasColumnName("id_ajuste");

                    b.Property<long?>("IdProducto")
                        .HasColumnType("bigint")
                        .HasColumnName("id_producto");

                    b.HasKey("IdDetalle")
                        .HasName("detalle_ajuste_stock_pkey");

                    b.HasIndex("IdAjuste");

                    b.HasIndex("IdProducto");

                    b.ToTable("detalle_ajuste_stock", (string)null);
                });

            modelBuilder.Entity("BackendApp.Models.Embedding", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("embeddings_pkey");

                    b.ToTable("embeddings", "meta");
                });

            modelBuilder.Entity("BackendApp.Models.Factura", b =>
                {
                    b.Property<long>("IdFactura")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_factura");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("IdFactura"));

                    b.Property<string>("Estado")
                        .HasColumnType("text")
                        .HasColumnName("estado");

                    b.Property<DateOnly?>("Fecha")
                        .HasColumnType("date")
                        .HasColumnName("fecha");

                    b.Property<long>("IdPedido")
                        .HasColumnType("bigint")
                        .HasColumnName("id_pedido");

                    b.Property<long>("IdProveedor")
                        .HasColumnType("bigint")
                        .HasColumnName("id_proveedor");

                    b.Property<decimal?>("Iva10")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("iva10");

                    b.Property<decimal?>("Iva5")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("iva5");

                    b.Property<decimal?>("MontoTotal")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("monto_total");

                    b.Property<string>("NombreProveedor")
                        .HasColumnType("text")
                        .HasColumnName("nombre_proveedor");

                    b.Property<string>("NroFactura")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nro_factura");

                    b.Property<string>("Ruc")
                        .HasColumnType("text")
                        .HasColumnName("ruc");

                    b.Property<decimal?>("Subtotal")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("subtotal");

                    b.Property<string>("Timbrado")
                        .HasColumnType("text")
                        .HasColumnName("timbrado");

                    b.HasKey("IdFactura")
                        .HasName("facturas_pkey");

                    b.HasIndex("IdPedido");

                    b.HasIndex("IdProveedor");

                    b.ToTable("facturas", (string)null);
                });

            modelBuilder.Entity("BackendApp.Models.FacturaDetalle", b =>
                {
                    b.Property<long>("IdFacturaDetalle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_factura_detalle");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("IdFacturaDetalle"));

                    b.Property<int?>("Cantidad")
                        .HasColumnType("integer")
                        .HasColumnName("cantidad");

                    b.Property<long>("IdFactura")
                        .HasColumnType("bigint")
                        .HasColumnName("id_factura");

                    b.Property<long>("IdProducto")
                        .HasColumnType("bigint")
                        .HasColumnName("id_producto");

                    b.Property<decimal?>("Iva10")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("iva10");

                    b.Property<decimal?>("Iva5")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("iva5");

                    b.Property<decimal?>("Precio")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("precio");

                    b.HasKey("IdFacturaDetalle")
                        .HasName("factura_detalle_pkey");

                    b.HasIndex("IdFactura");

                    b.HasIndex("IdProducto");

                    b.ToTable("factura_detalle", (string)null);
                });

            modelBuilder.Entity("BackendApp.Models.FlowState", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AuthCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("auth_code");

                    b.Property<DateTime?>("AuthCodeIssuedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("auth_code_issued_at");

                    b.Property<string>("AuthenticationMethod")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("authentication_method");

                    b.Property<string>("CodeChallenge")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code_challenge");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("ProviderAccessToken")
                        .HasColumnType("text")
                        .HasColumnName("provider_access_token");

                    b.Property<string>("ProviderRefreshToken")
                        .HasColumnType("text")
                        .HasColumnName("provider_refresh_token");

                    b.Property<string>("ProviderType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("provider_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("flow_state_pkey");

                    b.HasIndex(new[] { "CreatedAt" }, "flow_state_created_at_idx")
                        .IsDescending();

                    b.HasIndex(new[] { "AuthCode" }, "idx_auth_code");

                    b.HasIndex(new[] { "UserId", "AuthenticationMethod" }, "idx_user_id_auth_method");

                    b.ToTable("flow_state", "auth", t =>
                        {
                            t.HasComment("stores metadata for pkce logins");
                        });
                });

            modelBuilder.Entity("BackendApp.Models.Identity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("text")
                        .HasColumnName("email")
                        .HasComputedColumnSql("lower((identity_data ->> 'email'::text))", true)
                        .HasComment("Auth: Email is a generated column that references the optional email property in the identity_data");

                    b.Property<string>("IdentityData")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("identity_data");

                    b.Property<DateTime?>("LastSignInAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_sign_in_at");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("provider");

                    b.Property<string>("ProviderId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("provider_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("identities_pkey");

                    b.HasIndex(new[] { "Email" }, "identities_email_idx");

                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex(new[] { "Email" }, "identities_email_idx"), new[] { "text_pattern_ops" });

                    b.HasIndex(new[] { "ProviderId", "Provider" }, "identities_provider_id_provider_unique")
                        .IsUnique();

                    b.HasIndex(new[] { "UserId" }, "identities_user_id_idx");

                    b.ToTable("identities", "auth", t =>
                        {
                            t.HasComment("Auth: Stores identities associated to a user.");
                        });
                });

            modelBuilder.Entity("BackendApp.Models.Instance", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("RawBaseConfig")
                        .HasColumnType("text")
                        .HasColumnName("raw_base_config");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("instances_pkey");

                    b.ToTable("instances", "auth", t =>
                        {
                            t.HasComment("Auth: Manages users across multiple sites.");
                        });
                });

            modelBuilder.Entity("BackendApp.Models.MfaAmrClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AuthenticationMethod")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("authentication_method");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uuid")
                        .HasColumnName("session_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("amr_id_pk");

                    b.HasIndex(new[] { "SessionId", "AuthenticationMethod" }, "mfa_amr_claims_session_id_authentication_method_pkey")
                        .IsUnique();

                    b.ToTable("mfa_amr_claims", "auth", t =>
                        {
                            t.HasComment("auth: stores authenticator method reference claims for multi factor authentication");
                        });
                });

            modelBuilder.Entity("BackendApp.Models.MfaChallenge", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("FactorId")
                        .HasColumnType("uuid")
                        .HasColumnName("factor_id");

                    b.Property<IPAddress>("IpAddress")
                        .IsRequired()
                        .HasColumnType("inet")
                        .HasColumnName("ip_address");

                    b.Property<string>("OtpCode")
                        .HasColumnType("text")
                        .HasColumnName("otp_code");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("verified_at");

                    b.Property<string>("WebAuthnSessionData")
                        .HasColumnType("jsonb")
                        .HasColumnName("web_authn_session_data");

                    b.HasKey("Id")
                        .HasName("mfa_challenges_pkey");

                    b.HasIndex("FactorId");

                    b.HasIndex(new[] { "CreatedAt" }, "mfa_challenge_created_at_idx")
                        .IsDescending();

                    b.ToTable("mfa_challenges", "auth", t =>
                        {
                            t.HasComment("auth: stores metadata about challenge requests made");
                        });
                });

            modelBuilder.Entity("BackendApp.Models.MfaFactor", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("FriendlyName")
                        .HasColumnType("text")
                        .HasColumnName("friendly_name");

                    b.Property<DateTime?>("LastChallengedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_challenged_at");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<string>("Secret")
                        .HasColumnType("text")
                        .HasColumnName("secret");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid?>("WebAuthnAaguid")
                        .HasColumnType("uuid")
                        .HasColumnName("web_authn_aaguid");

                    b.Property<string>("WebAuthnCredential")
                        .HasColumnType("jsonb")
                        .HasColumnName("web_authn_credential");

                    b.HasKey("Id")
                        .HasName("mfa_factors_pkey");

                    b.HasIndex(new[] { "UserId", "CreatedAt" }, "factor_id_created_at_idx");

                    b.HasIndex(new[] { "LastChallengedAt" }, "mfa_factors_last_challenged_at_key")
                        .IsUnique();

                    b.HasIndex(new[] { "FriendlyName", "UserId" }, "mfa_factors_user_friendly_name_unique")
                        .IsUnique()
                        .HasFilter("(TRIM(BOTH FROM friendly_name) <> ''::text)");

                    b.HasIndex(new[] { "UserId" }, "mfa_factors_user_id_idx");

                    b.HasIndex(new[] { "UserId", "Phone" }, "unique_phone_factor_per_user")
                        .IsUnique();

                    b.ToTable("mfa_factors", "auth", t =>
                        {
                            t.HasComment("auth: stores metadata about factors");
                        });
                });

            modelBuilder.Entity("BackendApp.Models.Migration", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<DateTime?>("ExecutedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("executed_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("hash");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("migrations_pkey");

                    b.HasIndex(new[] { "Name" }, "migrations_name_key")
                        .IsUnique();

                    b.ToTable("migrations", "storage");
                });

            modelBuilder.Entity("BackendApp.Models.Migration1", b =>
                {
                    b.Property<string>("Version")
                        .HasColumnType("text")
                        .HasColumnName("version");

                    b.Property<DateTime>("AppliedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("applied_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Version")
                        .HasName("migrations_pkey");

                    b.ToTable("migrations", "meta");
                });

            modelBuilder.Entity("BackendApp.Models.NotaCreditoDetalle", b =>
                {
                    b.Property<long>("IdNotaDetalle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_nota_detalle");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("IdNotaDetalle"));

                    b.Property<int?>("Cantidad")
                        .HasColumnType("integer")
                        .HasColumnName("cantidad");

                    b.Property<long>("IdNota")
                        .HasColumnType("bigint")
                        .HasColumnName("id_nota");

                    b.Property<long>("IdProducto")
                        .HasColumnType("bigint")
                        .HasColumnName("id_producto");

                    b.Property<decimal?>("Iva10")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("iva10");

                    b.Property<decimal?>("Iva5")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("iva5");

                    b.Property<string>("Motivo")
                        .HasColumnType("text")
                        .HasColumnName("motivo");

                    b.Property<decimal?>("Precio")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("precio");

                    b.HasKey("IdNotaDetalle")
                        .HasName("nota_credito_detalle_pkey");

                    b.HasIndex("IdNota");

                    b.HasIndex("IdProducto");

                    b.ToTable("nota_credito_detalle", (string)null);
                });

            modelBuilder.Entity("BackendApp.Models.NotaDeDevolucion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Fecha")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Motivo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("motivo");

                    b.Property<long?>("PedidoId")
                        .HasColumnType("bigint")
                        .HasColumnName("pedido_id");

                    b.Property<long?>("ProductoId")
                        .HasColumnType("bigint")
                        .HasColumnName("producto_id");

                    b.HasKey("Id")
                        .HasName("nota_de_devolucion_pkey");

                    b.HasIndex("PedidoId");

                    b.HasIndex("ProductoId");

                    b.ToTable("nota_de_devolucion", (string)null);
                });

            modelBuilder.Entity("BackendApp.Models.NotasCredito", b =>
                {
                    b.Property<long>("IdNota")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_nota");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("IdNota"));

                    b.Property<string>("Estado")
                        .HasColumnType("text")
                        .HasColumnName("estado");

                    b.Property<DateOnly?>("Fecha")
                        .HasColumnType("date")
                        .HasColumnName("fecha");

                    b.Property<long>("IdFactura")
                        .HasColumnType("bigint")
                        .HasColumnName("id_factura");

                    b.Property<long>("IdProveedor")
                        .HasColumnType("bigint")
                        .HasColumnName("id_proveedor");

                    b.Property<decimal?>("Iva10")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("iva10");

                    b.Property<decimal?>("Iva5")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("iva5");

                    b.Property<decimal?>("MontoTotal")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("monto_total");

                    b.Property<string>("NombreProveedor")
                        .HasColumnType("text")
                        .HasColumnName("nombre_proveedor");

                    b.Property<string>("Ruc")
                        .HasColumnType("text")
                        .HasColumnName("ruc");

                    b.Property<decimal?>("Subtotal")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("subtotal");

                    b.Property<string>("Timbrado")
                        .HasColumnType("text")
                        .HasColumnName("timbrado");

                    b.HasKey("IdNota")
                        .HasName("notas_credito_pkey");

                    b.HasIndex("IdFactura");

                    b.HasIndex("IdProveedor");

                    b.ToTable("notas_credito", (string)null);
                });

            modelBuilder.Entity("BackendApp.Models.Object", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("BucketId")
                        .HasColumnType("text")
                        .HasColumnName("bucket_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("LastAccessedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_accessed_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Metadata")
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid")
                        .HasColumnName("owner")
                        .HasComment("Field is deprecated, use owner_id instead");

                    b.Property<string>("OwnerId")
                        .HasColumnType("text")
                        .HasColumnName("owner_id");

                    b.PrimitiveCollection<List<string>>("PathTokens")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("text[]")
                        .HasColumnName("path_tokens")
                        .HasComputedColumnSql("string_to_array(name, '/'::text)", true);

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("UserMetadata")
                        .HasColumnType("jsonb")
                        .HasColumnName("user_metadata");

                    b.Property<string>("Version")
                        .HasColumnType("text")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("objects_pkey");

                    b.HasIndex(new[] { "BucketId", "Name" }, "bucketid_objname")
                        .IsUnique();

                    b.HasIndex(new[] { "BucketId", "Name" }, "idx_objects_bucket_id_name");

                    NpgsqlIndexBuilderExtensions.UseCollation(b.HasIndex(new[] { "BucketId", "Name" }, "idx_objects_bucket_id_name"), new[] { null, "C" });

                    b.HasIndex(new[] { "Name" }, "name_prefix_search");

                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex(new[] { "Name" }, "name_prefix_search"), new[] { "text_pattern_ops" });

                    b.ToTable("objects", "storage");
                });

            modelBuilder.Entity("BackendApp.Models.OneTimeToken", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("RelatesTo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("relates_to");

                    b.Property<string>("TokenHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("token_hash");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("one_time_tokens_pkey");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "RelatesTo" }, "one_time_tokens_relates_to_hash_idx");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex(new[] { "RelatesTo" }, "one_time_tokens_relates_to_hash_idx"), "hash");

                    b.HasIndex(new[] { "TokenHash" }, "one_time_tokens_token_hash_hash_idx");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex(new[] { "TokenHash" }, "one_time_tokens_token_hash_hash_idx"), "hash");

                    b.ToTable("one_time_tokens", "auth");
                });

            modelBuilder.Entity("BackendApp.Models.OrdenDetalle", b =>
                {
                    b.Property<long>("IdOrdenDetalle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_orden_detalle");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("IdOrdenDetalle"));

                    b.Property<int?>("Cantidad")
                        .HasColumnType("integer")
                        .HasColumnName("cantidad");

                    b.Property<long>("IdOrden")
                        .HasColumnType("bigint")
                        .HasColumnName("id_orden");

                    b.Property<long>("IdProducto")
                        .HasColumnType("bigint")
                        .HasColumnName("id_producto");

                    b.HasKey("IdOrdenDetalle")
                        .HasName("orden_detalle_pkey");

                    b.HasIndex("IdOrden");

                    b.HasIndex("IdProducto");

                    b.ToTable("orden_detalle", (string)null);
                });

            modelBuilder.Entity("BackendApp.Models.Ordene", b =>
                {
                    b.Property<long>("IdOrden")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_orden");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("IdOrden"));

                    b.Property<string>("Estado")
                        .HasColumnType("text")
                        .HasColumnName("estado");

                    b.Property<DateOnly?>("Fecha")
                        .HasColumnType("date")
                        .HasColumnName("fecha");

                    b.HasKey("IdOrden")
                        .HasName("ordenes_pkey");

                    b.ToTable("ordenes", (string)null);
                });

            modelBuilder.Entity("BackendApp.Models.Pedido", b =>
                {
                    b.Property<long>("IdPedido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_pedido");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("IdPedido"));

                    b.Property<string>("Estado")
                        .HasColumnType("text")
                        .HasColumnName("estado");

                    b.Property<DateOnly?>("FechaEntrega")
                        .HasColumnType("date")
                        .HasColumnName("fecha_entrega");

                    b.Property<DateOnly?>("FechaPedido")
                        .HasColumnType("date")
                        .HasColumnName("fecha_pedido");

                    b.Property<long>("IdOrden")
                        .HasColumnType("bigint")
                        .HasColumnName("id_orden");

                    b.Property<long>("IdProveedor")
                        .HasColumnType("bigint")
                        .HasColumnName("id_proveedor");

                    b.Property<decimal?>("MontoTotal")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("monto_total");

                    b.HasKey("IdPedido")
                        .HasName("pedidos_pkey");

                    b.HasIndex("IdOrden");

                    b.HasIndex("IdProveedor");

                    b.ToTable("pedidos", (string)null);
                });

            modelBuilder.Entity("BackendApp.Models.PedidoDetalle", b =>
                {
                    b.Property<long>("IdPedidoDetalle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_pedido_detalle");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("IdPedidoDetalle"));

                    b.Property<int?>("Cantidad")
                        .HasColumnType("integer")
                        .HasColumnName("cantidad");

                    b.Property<decimal?>("Cotizacion")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("cotizacion");

                    b.Property<long>("IdPedido")
                        .HasColumnType("bigint")
                        .HasColumnName("id_pedido");

                    b.Property<long>("IdProducto")
                        .HasColumnType("bigint")
                        .HasColumnName("id_producto");

                    b.Property<decimal?>("Iva")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("iva");

                    b.HasKey("IdPedidoDetalle")
                        .HasName("pedido_detalles_pkey");

                    b.HasIndex("IdPedido");

                    b.HasIndex("IdProducto");

                    b.ToTable("pedido_detalles", (string)null);
                });

            modelBuilder.Entity("BackendApp.Models.Personal", b =>
                {
                    b.Property<long>("IdPersonal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_personal");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("IdPersonal"));

                    b.Property<string>("Apellido")
                        .HasColumnType("text")
                        .HasColumnName("apellido");

                    b.Property<string>("Ci")
                        .HasColumnType("text")
                        .HasColumnName("ci");

                    b.Property<string>("Estado")
                        .HasColumnType("text")
                        .HasColumnName("estado");

                    b.Property<DateOnly?>("FechaIngreso")
                        .HasColumnType("date")
                        .HasColumnName("fecha_ingreso");

                    b.Property<DateOnly?>("FechaSalida")
                        .HasColumnType("date")
                        .HasColumnName("fecha_salida");

                    b.Property<long?>("IdRol")
                        .HasColumnType("bigint")
                        .HasColumnName("id_rol");

                    b.Property<long?>("IdUser")
                        .HasColumnType("bigint")
                        .HasColumnName("id_user");

                    b.Property<string>("Nombre")
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.HasKey("IdPersonal")
                        .HasName("personal_pkey");

                    b.HasIndex("IdRol");

                    b.HasIndex("IdUser");

                    b.ToTable("personal", (string)null);
                });

            modelBuilder.Entity("BackendApp.Models.Precio", b =>
                {
                    b.Property<long>("IdPrecio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_precio");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("IdPrecio"));

                    b.Property<string>("Estado")
                        .HasColumnType("text")
                        .HasColumnName("estado");

                    b.Property<DateOnly?>("FechaRegistro")
                        .HasColumnType("date")
                        .HasColumnName("fecha_registro");

                    b.Property<long?>("IdProducto")
                        .HasColumnType("bigint")
                        .HasColumnName("id_producto");

                    b.Property<decimal?>("Precio1")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("precio");

                    b.HasKey("IdPrecio")
                        .HasName("precios_pkey");

                    b.HasIndex("IdProducto");

                    b.ToTable("precios", (string)null);
                });

            modelBuilder.Entity("BackendApp.Models.Presupuesto", b =>
                {
                    b.Property<long>("IdPresupuesto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_presupuesto");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("IdPresupuesto"));

                    b.Property<DateOnly?>("FechaEntrega")
                        .HasColumnType("date")
                        .HasColumnName("fecha_entrega");

                    b.Property<long>("IdOrden")
                        .HasColumnType("bigint")
                        .HasColumnName("id_orden");

                    b.Property<long>("IdProveedor")
                        .HasColumnType("bigint")
                        .HasColumnName("id_proveedor");

                    b.Property<decimal?>("Iva10")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("iva10");

                    b.Property<decimal?>("Iva5")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("iva5");

                    b.Property<decimal?>("Subtotal")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("subtotal");

                    b.Property<decimal?>("Total")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("total");

                    b.HasKey("IdPresupuesto")
                        .HasName("presupuestos_pkey");

                    b.HasIndex("IdProveedor");

                    b.ToTable("presupuestos", (string)null);
                });

            modelBuilder.Entity("BackendApp.Models.PresupuestoDetalle", b =>
                {
                    b.Property<long>("IdPresupuestoDetalle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_presupuesto_detalle");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("IdPresupuestoDetalle"));

                    b.Property<int?>("Cantidad")
                        .HasColumnType("integer")
                        .HasColumnName("cantidad");

                    b.Property<long>("IdPresupuesto")
                        .HasColumnType("bigint")
                        .HasColumnName("id_presupuesto");

                    b.Property<long>("IdProducto")
                        .HasColumnType("bigint")
                        .HasColumnName("id_producto");

                    b.Property<decimal?>("Iva10")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("iva10");

                    b.Property<decimal?>("Iva5")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("iva5");

                    b.Property<decimal?>("Precio")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("precio");

                    b.HasKey("IdPresupuestoDetalle")
                        .HasName("presupuesto_detalle_pkey");

                    b.HasIndex("IdPresupuesto");

                    b.HasIndex("IdProducto");

                    b.ToTable("presupuesto_detalle", (string)null);
                });

            modelBuilder.Entity("BackendApp.Models.PresupuestosProveedore", b =>
                {
                    b.Property<long>("IdPresupuesto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_presupuesto");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("IdPresupuesto"));

                    b.Property<DateOnly>("FechaEnvio")
                        .HasColumnType("date")
                        .HasColumnName("fecha_envio");

                    b.Property<long>("OrdenId")
                        .HasColumnType("bigint")
                        .HasColumnName("orden_id");

                    b.Property<long>("ProveedorId")
                        .HasColumnType("bigint")
                        .HasColumnName("proveedor_id");

                    b.HasKey("IdPresupuesto")
                        .HasName("presupuestos_proveedores_pkey");

                    b.HasIndex("ProveedorId");

                    b.ToTable("presupuestos_proveedores", (string)null);
                });

            modelBuilder.Entity("BackendApp.Models.Producto", b =>
                {
                    b.Property<long>("IdProducto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_producto");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("IdProducto"));

                    b.Property<int?>("CantidadMinima")
                        .HasColumnType("integer")
                        .HasColumnName("cantidad_minima");

                    b.Property<int?>("CantidadTotal")
                        .HasColumnType("integer")
                        .HasColumnName("cantidad_total");

                    b.Property<long?>("IdCategoria")
                        .HasColumnType("bigint")
                        .HasColumnName("id_categoria");

                    b.Property<long?>("IdStock")
                        .HasColumnType("bigint")
                        .HasColumnName("id_stock");

                    b.Property<string>("Marca")
                        .HasColumnType("text")
                        .HasColumnName("marca");

                    b.Property<string>("Nombre")
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.HasKey("IdProducto")
                        .HasName("productos_pkey");

                    b.HasIndex("IdCategoria");

                    b.HasIndex("IdStock");

                    b.ToTable("productos", (string)null);
                });

            modelBuilder.Entity("BackendApp.Models.ProductoProveedor", b =>
                {
                    b.Property<long>("IdProductoProveedor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_producto_proveedor");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("IdProductoProveedor"));

                    b.Property<int?>("Cantidad")
                        .HasColumnType("integer")
                        .HasColumnName("cantidad");

                    b.Property<DateOnly?>("FechaCompra")
                        .HasColumnType("date")
                        .HasColumnName("fecha_compra");

                    b.Property<long?>("IdProducto")
                        .HasColumnType("bigint")
                        .HasColumnName("id_producto");

                    b.Property<long?>("IdProveedor")
                        .HasColumnType("bigint")
                        .HasColumnName("id_proveedor");

                    b.HasKey("IdProductoProveedor")
                        .HasName("producto_proveedor_pkey");

                    b.HasIndex("IdProducto");

                    b.HasIndex("IdProveedor");

                    b.ToTable("producto_proveedor", (string)null);
                });

            modelBuilder.Entity("BackendApp.Models.Proveedore", b =>
                {
                    b.Property<long>("IdProveedor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_proveedor");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("IdProveedor"));

                    b.Property<string>("Correo")
                        .HasColumnType("text")
                        .HasColumnName("correo");

                    b.Property<string>("Nombre")
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<string>("NombreContacto")
                        .HasColumnType("text")
                        .HasColumnName("nombre_contacto");

                    b.Property<string>("Ruc")
                        .HasColumnType("text")
                        .HasColumnName("ruc");

                    b.Property<string>("Telefono")
                        .HasColumnType("text")
                        .HasColumnName("telefono");

                    b.HasKey("IdProveedor")
                        .HasName("proveedores_pkey");

                    b.ToTable("proveedores", (string)null);
                });

            modelBuilder.Entity("BackendApp.Models.Recepcion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Estado")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("estado")
                        .HasDefaultValueSql("'Pendiente'::text");

                    b.Property<DateTime>("FechaRecepcion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fecha_recepcion")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("IdOrden")
                        .HasColumnType("bigint")
                        .HasColumnName("id_orden");

                    b.Property<long>("IdPedido")
                        .HasColumnType("bigint")
                        .HasColumnName("id_pedido");

                    b.Property<string>("NumeroFactura")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("numero_factura");

                    b.Property<string>("Timbrado")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("timbrado");

                    b.HasKey("Id")
                        .HasName("recepcion_pkey");

                    b.HasIndex("IdOrden");

                    b.HasIndex("IdPedido");

                    b.ToTable("recepcion", (string)null);
                });

            modelBuilder.Entity("BackendApp.Models.RecepcionDetalle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("CantidadRecibida")
                        .HasColumnType("integer")
                        .HasColumnName("cantidad_recibida");

                    b.Property<long>("IdProducto")
                        .HasColumnType("bigint")
                        .HasColumnName("id_producto");

                    b.Property<long>("IdRecepcion")
                        .HasColumnType("bigint")
                        .HasColumnName("id_recepcion");

                    b.HasKey("Id")
                        .HasName("recepcion_detalle_pkey");

                    b.HasIndex("IdProducto");

                    b.HasIndex("IdRecepcion");

                    b.ToTable("recepcion_detalle", (string)null);
                });

            modelBuilder.Entity("BackendApp.Models.RefreshToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("InstanceId")
                        .HasColumnType("uuid")
                        .HasColumnName("instance_id");

                    b.Property<string>("Parent")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("parent");

                    b.Property<bool?>("Revoked")
                        .HasColumnType("boolean")
                        .HasColumnName("revoked");

                    b.Property<Guid?>("SessionId")
                        .HasColumnType("uuid")
                        .HasColumnName("session_id");

                    b.Property<string>("Token")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("token");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("refresh_tokens_pkey");

                    b.HasIndex(new[] { "InstanceId" }, "refresh_tokens_instance_id_idx");

                    b.HasIndex(new[] { "InstanceId", "UserId" }, "refresh_tokens_instance_id_user_id_idx");

                    b.HasIndex(new[] { "Parent" }, "refresh_tokens_parent_idx");

                    b.HasIndex(new[] { "SessionId", "Revoked" }, "refresh_tokens_session_id_revoked_idx");

                    b.HasIndex(new[] { "Token" }, "refresh_tokens_token_unique")
                        .IsUnique();

                    b.HasIndex(new[] { "UpdatedAt" }, "refresh_tokens_updated_at_idx")
                        .IsDescending();

                    b.ToTable("refresh_tokens", "auth", t =>
                        {
                            t.HasComment("Auth: Store of tokens used to refresh JWT tokens once they expire.");
                        });
                });

            modelBuilder.Entity("BackendApp.Models.Role", b =>
                {
                    b.Property<long>("IdRol")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_rol");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("IdRol"));

                    b.Property<string>("Descripcion")
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.HasKey("IdRol")
                        .HasName("roles_pkey");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("BackendApp.Models.S3MultipartUpload", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("BucketId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bucket_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("InProgressSize")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("in_progress_size");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("key")
                        .UseCollation("C");

                    b.Property<string>("OwnerId")
                        .HasColumnType("text")
                        .HasColumnName("owner_id");

                    b.Property<string>("UploadSignature")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("upload_signature");

                    b.Property<string>("UserMetadata")
                        .HasColumnType("jsonb")
                        .HasColumnName("user_metadata");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("s3_multipart_uploads_pkey");

                    b.HasIndex(new[] { "BucketId", "Key", "CreatedAt" }, "idx_multipart_uploads_list");

                    NpgsqlIndexBuilderExtensions.UseCollation(b.HasIndex(new[] { "BucketId", "Key", "CreatedAt" }, "idx_multipart_uploads_list"), new[] { null, "C", null });

                    b.ToTable("s3_multipart_uploads", "storage");
                });

            modelBuilder.Entity("BackendApp.Models.S3MultipartUploadsPart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("BucketId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bucket_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Etag")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("etag");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("key")
                        .UseCollation("C");

                    b.Property<string>("OwnerId")
                        .HasColumnType("text")
                        .HasColumnName("owner_id");

                    b.Property<int>("PartNumber")
                        .HasColumnType("integer")
                        .HasColumnName("part_number");

                    b.Property<long>("Size")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("size");

                    b.Property<string>("UploadId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("upload_id");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("s3_multipart_uploads_parts_pkey");

                    b.HasIndex("BucketId");

                    b.HasIndex("UploadId");

                    b.ToTable("s3_multipart_uploads_parts", "storage");
                });

            modelBuilder.Entity("BackendApp.Models.SamlProvider", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AttributeMapping")
                        .HasColumnType("jsonb")
                        .HasColumnName("attribute_mapping");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("entity_id");

                    b.Property<string>("MetadataUrl")
                        .HasColumnType("text")
                        .HasColumnName("metadata_url");

                    b.Property<string>("MetadataXml")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("metadata_xml");

                    b.Property<string>("NameIdFormat")
                        .HasColumnType("text")
                        .HasColumnName("name_id_format");

                    b.Property<Guid>("SsoProviderId")
                        .HasColumnType("uuid")
                        .HasColumnName("sso_provider_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("saml_providers_pkey");

                    b.HasIndex(new[] { "EntityId" }, "saml_providers_entity_id_key")
                        .IsUnique();

                    b.HasIndex(new[] { "SsoProviderId" }, "saml_providers_sso_provider_id_idx");

                    b.ToTable("saml_providers", "auth", t =>
                        {
                            t.HasComment("Auth: Manages SAML Identity Provider connections.");
                        });
                });

            modelBuilder.Entity("BackendApp.Models.SamlRelayState", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("FlowStateId")
                        .HasColumnType("uuid")
                        .HasColumnName("flow_state_id");

                    b.Property<string>("ForEmail")
                        .HasColumnType("text")
                        .HasColumnName("for_email");

                    b.Property<string>("RedirectTo")
                        .HasColumnType("text")
                        .HasColumnName("redirect_to");

                    b.Property<string>("RequestId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("request_id");

                    b.Property<Guid>("SsoProviderId")
                        .HasColumnType("uuid")
                        .HasColumnName("sso_provider_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("saml_relay_states_pkey");

                    b.HasIndex("FlowStateId");

                    b.HasIndex(new[] { "CreatedAt" }, "saml_relay_states_created_at_idx")
                        .IsDescending();

                    b.HasIndex(new[] { "ForEmail" }, "saml_relay_states_for_email_idx");

                    b.HasIndex(new[] { "SsoProviderId" }, "saml_relay_states_sso_provider_id_idx");

                    b.ToTable("saml_relay_states", "auth", t =>
                        {
                            t.HasComment("Auth: Contains SAML Relay State information for each Service Provider initiated login.");
                        });
                });

            modelBuilder.Entity("BackendApp.Models.SchemaMigration", b =>
                {
                    b.Property<string>("Version")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("version");

                    b.HasKey("Version")
                        .HasName("schema_migrations_pkey");

                    b.ToTable("schema_migrations", "auth", t =>
                        {
                            t.HasComment("Auth: Manages updates to the auth system.");
                        });
                });

            modelBuilder.Entity("BackendApp.Models.SchemaMigration1", b =>
                {
                    b.Property<long>("Version")
                        .HasColumnType("bigint")
                        .HasColumnName("version");

                    b.Property<DateTime?>("InsertedAt")
                        .HasColumnType("timestamp(0) without time zone")
                        .HasColumnName("inserted_at");

                    b.HasKey("Version")
                        .HasName("schema_migrations_pkey");

                    b.ToTable("schema_migrations", "realtime");
                });

            modelBuilder.Entity("BackendApp.Models.Servicio", b =>
                {
                    b.Property<long>("IdServicio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_servicio");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("IdServicio"));

                    b.Property<decimal?>("Costo")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("costo");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.Property<string>("Nombre")
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.HasKey("IdServicio")
                        .HasName("servicios_pkey");

                    b.ToTable("servicios", (string)null);
                });

            modelBuilder.Entity("BackendApp.Models.ServiciosProductosUtilizado", b =>
                {
                    b.Property<long>("IdServicioProducto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_servicio_producto");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("IdServicioProducto"));

                    b.Property<int?>("Cantidad")
                        .HasColumnType("integer")
                        .HasColumnName("cantidad");

                    b.Property<long?>("IdProducto")
                        .HasColumnType("bigint")
                        .HasColumnName("id_producto");

                    b.Property<long?>("IdServicioRealizado")
                        .HasColumnType("bigint")
                        .HasColumnName("id_servicio_realizado");

                    b.HasKey("IdServicioProducto")
                        .HasName("servicios_productos_utilizados_pkey");

                    b.HasIndex("IdProducto");

                    b.HasIndex("IdServicioRealizado");

                    b.ToTable("servicios_productos_utilizados", (string)null);
                });

            modelBuilder.Entity("BackendApp.Models.ServiciosRealizado", b =>
                {
                    b.Property<long>("IdServicioRealizado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_servicio_realizado");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("IdServicioRealizado"));

                    b.Property<string>("Estado")
                        .HasColumnType("text")
                        .HasColumnName("estado");

                    b.Property<DateOnly?>("Fecha")
                        .HasColumnType("date")
                        .HasColumnName("fecha");

                    b.Property<long?>("IdPersonal")
                        .HasColumnType("bigint")
                        .HasColumnName("id_personal");

                    b.Property<long?>("IdServicio")
                        .HasColumnType("bigint")
                        .HasColumnName("id_servicio");

                    b.HasKey("IdServicioRealizado")
                        .HasName("servicios_realizados_pkey");

                    b.HasIndex("IdPersonal");

                    b.HasIndex("IdServicio");

                    b.ToTable("servicios_realizados", (string)null);
                });

            modelBuilder.Entity("BackendApp.Models.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("FactorId")
                        .HasColumnType("uuid")
                        .HasColumnName("factor_id");

                    b.Property<IPAddress>("Ip")
                        .HasColumnType("inet")
                        .HasColumnName("ip");

                    b.Property<DateTime?>("NotAfter")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("not_after")
                        .HasComment("Auth: Not after is a nullable column that contains a timestamp after which the session should be regarded as expired.");

                    b.Property<DateTime?>("RefreshedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("refreshed_at");

                    b.Property<string>("Tag")
                        .HasColumnType("text")
                        .HasColumnName("tag");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserAgent")
                        .HasColumnType("text")
                        .HasColumnName("user_agent");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("sessions_pkey");

                    b.HasIndex(new[] { "NotAfter" }, "sessions_not_after_idx")
                        .IsDescending();

                    b.HasIndex(new[] { "UserId" }, "sessions_user_id_idx");

                    b.HasIndex(new[] { "UserId", "CreatedAt" }, "user_id_created_at_idx");

                    b.ToTable("sessions", "auth", t =>
                        {
                            t.HasComment("Auth: Stores session data associated to a user.");
                        });
                });

            modelBuilder.Entity("BackendApp.Models.SsoDomain", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("domain");

                    b.Property<Guid>("SsoProviderId")
                        .HasColumnType("uuid")
                        .HasColumnName("sso_provider_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("sso_domains_pkey");

                    b.HasIndex(new[] { "SsoProviderId" }, "sso_domains_sso_provider_id_idx");

                    b.ToTable("sso_domains", "auth", t =>
                        {
                            t.HasComment("Auth: Manages SSO email address domain mapping to an SSO Identity Provider.");
                        });
                });

            modelBuilder.Entity("BackendApp.Models.SsoProvider", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("ResourceId")
                        .HasColumnType("text")
                        .HasColumnName("resource_id")
                        .HasComment("Auth: Uniquely identifies a SSO provider according to a user-chosen resource ID (case insensitive), useful in infrastructure as code.");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("sso_providers_pkey");

                    b.ToTable("sso_providers", "auth", t =>
                        {
                            t.HasComment("Auth: Manages SSO identity provider information; see saml_providers for SAML.");
                        });
                });

            modelBuilder.Entity("BackendApp.Models.Stock", b =>
                {
                    b.Property<long>("IdStock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_stock");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("IdStock"));

                    b.Property<long?>("IdPersonal")
                        .HasColumnType("bigint")
                        .HasColumnName("id_personal");

                    b.Property<string>("Ubicacion")
                        .HasColumnType("text")
                        .HasColumnName("ubicacion");

                    b.HasKey("IdStock")
                        .HasName("stock_pkey");

                    b.HasIndex("IdPersonal");

                    b.ToTable("stock", (string)null);
                });

            modelBuilder.Entity("BackendApp.Models.Subscription", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<string>("Claims")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("claims");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc'::text, now())");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uuid")
                        .HasColumnName("subscription_id");

                    b.HasKey("Id")
                        .HasName("pk_subscription");

                    b.ToTable("subscription", "realtime");
                });

            modelBuilder.Entity("BackendApp.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Aud")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("aud");

                    b.Property<DateTime?>("BannedUntil")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("banned_until");

                    b.Property<DateTime?>("ConfirmationSentAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("confirmation_sent_at");

                    b.Property<string>("ConfirmationToken")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("confirmation_token");

                    b.Property<DateTime?>("ConfirmedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("confirmed_at")
                        .HasComputedColumnSql("LEAST(email_confirmed_at, phone_confirmed_at)", true);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("EmailChange")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email_change");

                    b.Property<short?>("EmailChangeConfirmStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("email_change_confirm_status");

                    b.Property<DateTime?>("EmailChangeSentAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("email_change_sent_at");

                    b.Property<string>("EmailChangeTokenCurrent")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email_change_token_current")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("EmailChangeTokenNew")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email_change_token_new");

                    b.Property<DateTime?>("EmailConfirmedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("email_confirmed_at");

                    b.Property<string>("EncryptedPassword")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("encrypted_password");

                    b.Property<Guid?>("InstanceId")
                        .HasColumnType("uuid")
                        .HasColumnName("instance_id");

                    b.Property<DateTime?>("InvitedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("invited_at");

                    b.Property<bool>("IsAnonymous")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_anonymous");

                    b.Property<bool>("IsSsoUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_sso_user")
                        .HasComment("Auth: Set this column to true when the account comes from SSO. These accounts can have duplicate emails.");

                    b.Property<bool?>("IsSuperAdmin")
                        .HasColumnType("boolean")
                        .HasColumnName("is_super_admin");

                    b.Property<DateTime?>("LastSignInAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_sign_in_at");

                    b.Property<string>("Phone")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("phone")
                        .HasDefaultValueSql("NULL::character varying");

                    b.Property<string>("PhoneChange")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("phone_change")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<DateTime?>("PhoneChangeSentAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("phone_change_sent_at");

                    b.Property<string>("PhoneChangeToken")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("phone_change_token")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<DateTime?>("PhoneConfirmedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("phone_confirmed_at");

                    b.Property<string>("RawAppMetaData")
                        .HasColumnType("jsonb")
                        .HasColumnName("raw_app_meta_data");

                    b.Property<string>("RawUserMetaData")
                        .HasColumnType("jsonb")
                        .HasColumnName("raw_user_meta_data");

                    b.Property<DateTime?>("ReauthenticationSentAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("reauthentication_sent_at");

                    b.Property<string>("ReauthenticationToken")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("reauthentication_token")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<DateTime?>("RecoverySentAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("recovery_sent_at");

                    b.Property<string>("RecoveryToken")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("recovery_token");

                    b.Property<string>("Role")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("role");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("users_pkey");

                    b.HasIndex(new[] { "ConfirmationToken" }, "confirmation_token_idx")
                        .IsUnique()
                        .HasFilter("((confirmation_token)::text !~ '^[0-9 ]*$'::text)");

                    b.HasIndex(new[] { "EmailChangeTokenCurrent" }, "email_change_token_current_idx")
                        .IsUnique()
                        .HasFilter("((email_change_token_current)::text !~ '^[0-9 ]*$'::text)");

                    b.HasIndex(new[] { "EmailChangeTokenNew" }, "email_change_token_new_idx")
                        .IsUnique()
                        .HasFilter("((email_change_token_new)::text !~ '^[0-9 ]*$'::text)");

                    b.HasIndex(new[] { "ReauthenticationToken" }, "reauthentication_token_idx")
                        .IsUnique()
                        .HasFilter("((reauthentication_token)::text !~ '^[0-9 ]*$'::text)");

                    b.HasIndex(new[] { "RecoveryToken" }, "recovery_token_idx")
                        .IsUnique()
                        .HasFilter("((recovery_token)::text !~ '^[0-9 ]*$'::text)");

                    b.HasIndex(new[] { "Email" }, "users_email_partial_key")
                        .IsUnique()
                        .HasFilter("(is_sso_user = false)");

                    b.HasIndex(new[] { "InstanceId" }, "users_instance_id_idx");

                    b.HasIndex(new[] { "IsAnonymous" }, "users_is_anonymous_idx");

                    b.HasIndex(new[] { "Phone" }, "users_phone_key")
                        .IsUnique();

                    b.ToTable("users", "auth", t =>
                        {
                            t.HasComment("Auth: Stores user login data within a secure schema.");
                        });
                });

            modelBuilder.Entity("BackendApp.Models.Usuario", b =>
                {
                    b.Property<long>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_user");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("IdUser"));

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("Username")
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("IdUser")
                        .HasName("usuarios_pkey");

                    b.ToTable("usuarios", (string)null);
                });

            modelBuilder.Entity("BackendApp.Models.AjustesStock", b =>
                {
                    b.HasOne("BackendApp.Models.Personal", "IdPersonalNavigation")
                        .WithMany("AjustesStocks")
                        .HasForeignKey("IdPersonal")
                        .HasConstraintName("ajustes_stock_id_personal_fkey");

                    b.Navigation("IdPersonalNavigation");
                });

            modelBuilder.Entity("BackendApp.Models.Asiento", b =>
                {
                    b.HasOne("BackendApp.Models.NotasCredito", "IdNotaNavigation")
                        .WithMany("Asientos")
                        .HasForeignKey("IdNota")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asiento_nota");

                    b.HasOne("BackendApp.Models.Ordene", "IdOrdenNavigation")
                        .WithMany("Asientos")
                        .HasForeignKey("IdOrden")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asiento_orden");

                    b.HasOne("BackendApp.Models.Proveedore", "IdProveedorNavigation")
                        .WithMany("Asientos")
                        .HasForeignKey("IdProveedor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asiento_proveedor");

                    b.Navigation("IdNotaNavigation");

                    b.Navigation("IdOrdenNavigation");

                    b.Navigation("IdProveedorNavigation");
                });

            modelBuilder.Entity("BackendApp.Models.BajasProducto", b =>
                {
                    b.HasOne("BackendApp.Models.Producto", "IdProductoNavigation")
                        .WithMany("BajasProductos")
                        .HasForeignKey("IdProducto")
                        .HasConstraintName("bajas_producto_id_producto_fkey");

                    b.Navigation("IdProductoNavigation");
                });

            modelBuilder.Entity("BackendApp.Models.CategoriaProveedor", b =>
                {
                    b.HasOne("BackendApp.Models.Categorium", "IdCategoriaNavigation")
                        .WithMany("CategoriaProveedors")
                        .HasForeignKey("IdCategoria")
                        .HasConstraintName("categoria_proveedor_id_categoria_fkey");

                    b.HasOne("BackendApp.Models.Proveedore", "IdProveedorNavigation")
                        .WithMany("CategoriaProveedors")
                        .HasForeignKey("IdProveedor")
                        .HasConstraintName("categoria_proveedor_id_proveedor_fkey");

                    b.Navigation("IdCategoriaNavigation");

                    b.Navigation("IdProveedorNavigation");
                });

            modelBuilder.Entity("BackendApp.Models.ContadorFactura", b =>
                {
                    b.HasOne("BackendApp.Models.Proveedore", "IdProveedorNavigation")
                        .WithOne("ContadorFactura")
                        .HasForeignKey("BackendApp.Models.ContadorFactura", "IdProveedor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_contador_proveedor");

                    b.Navigation("IdProveedorNavigation");
                });

            modelBuilder.Entity("BackendApp.Models.DetalleAjusteStock", b =>
                {
                    b.HasOne("BackendApp.Models.AjustesStock", "IdAjusteNavigation")
                        .WithMany("DetalleAjusteStocks")
                        .HasForeignKey("IdAjuste")
                        .HasConstraintName("detalle_ajuste_stock_id_ajuste_fkey");

                    b.HasOne("BackendApp.Models.Producto", "IdProductoNavigation")
                        .WithMany("DetalleAjusteStocks")
                        .HasForeignKey("IdProducto")
                        .HasConstraintName("detalle_ajuste_stock_id_producto_fkey");

                    b.Navigation("IdAjusteNavigation");

                    b.Navigation("IdProductoNavigation");
                });

            modelBuilder.Entity("BackendApp.Models.Factura", b =>
                {
                    b.HasOne("BackendApp.Models.Pedido", "IdPedidoNavigation")
                        .WithMany("Facturas")
                        .HasForeignKey("IdPedido")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_factura_pedido");

                    b.HasOne("BackendApp.Models.Proveedore", "IdProveedorNavigation")
                        .WithMany("Facturas")
                        .HasForeignKey("IdProveedor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_factura_proveedor");

                    b.Navigation("IdPedidoNavigation");

                    b.Navigation("IdProveedorNavigation");
                });

            modelBuilder.Entity("BackendApp.Models.FacturaDetalle", b =>
                {
                    b.HasOne("BackendApp.Models.Factura", "IdFacturaNavigation")
                        .WithMany("FacturaDetalles")
                        .HasForeignKey("IdFactura")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_factura_detalle_factura");

                    b.HasOne("BackendApp.Models.Producto", "IdProductoNavigation")
                        .WithMany("FacturaDetalles")
                        .HasForeignKey("IdProducto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_factura_detalle_producto");

                    b.Navigation("IdFacturaNavigation");

                    b.Navigation("IdProductoNavigation");
                });

            modelBuilder.Entity("BackendApp.Models.Identity", b =>
                {
                    b.HasOne("BackendApp.Models.User", "User")
                        .WithMany("Identities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("identities_user_id_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackendApp.Models.MfaAmrClaim", b =>
                {
                    b.HasOne("BackendApp.Models.Session", "Session")
                        .WithMany("MfaAmrClaims")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("mfa_amr_claims_session_id_fkey");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("BackendApp.Models.MfaChallenge", b =>
                {
                    b.HasOne("BackendApp.Models.MfaFactor", "Factor")
                        .WithMany("MfaChallenges")
                        .HasForeignKey("FactorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("mfa_challenges_auth_factor_id_fkey");

                    b.Navigation("Factor");
                });

            modelBuilder.Entity("BackendApp.Models.MfaFactor", b =>
                {
                    b.HasOne("BackendApp.Models.User", "User")
                        .WithMany("MfaFactors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("mfa_factors_user_id_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackendApp.Models.NotaCreditoDetalle", b =>
                {
                    b.HasOne("BackendApp.Models.NotasCredito", "IdNotaNavigation")
                        .WithMany("NotaCreditoDetalles")
                        .HasForeignKey("IdNota")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_nota_credito_detalle_nota");

                    b.HasOne("BackendApp.Models.Producto", "IdProductoNavigation")
                        .WithMany("NotaCreditoDetalles")
                        .HasForeignKey("IdProducto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_nota_credito_detalle_producto");

                    b.Navigation("IdNotaNavigation");

                    b.Navigation("IdProductoNavigation");
                });

            modelBuilder.Entity("BackendApp.Models.NotaDeDevolucion", b =>
                {
                    b.HasOne("BackendApp.Models.Pedido", "Pedido")
                        .WithMany("NotaDeDevolucions")
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("nota_de_devolucion_pedido_id_fkey");

                    b.HasOne("BackendApp.Models.Producto", "Producto")
                        .WithMany("NotaDeDevolucions")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("nota_de_devolucion_producto_id_fkey");

                    b.Navigation("Pedido");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("BackendApp.Models.NotasCredito", b =>
                {
                    b.HasOne("BackendApp.Models.Factura", "IdFacturaNavigation")
                        .WithMany("NotasCreditos")
                        .HasForeignKey("IdFactura")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_notas_credito_factura");

                    b.HasOne("BackendApp.Models.Proveedore", "IdProveedorNavigation")
                        .WithMany("NotasCreditos")
                        .HasForeignKey("IdProveedor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_notas_credito_proveedor");

                    b.Navigation("IdFacturaNavigation");

                    b.Navigation("IdProveedorNavigation");
                });

            modelBuilder.Entity("BackendApp.Models.Object", b =>
                {
                    b.HasOne("BackendApp.Models.Bucket", "Bucket")
                        .WithMany("Objects")
                        .HasForeignKey("BucketId")
                        .HasConstraintName("objects_bucketId_fkey");

                    b.Navigation("Bucket");
                });

            modelBuilder.Entity("BackendApp.Models.OneTimeToken", b =>
                {
                    b.HasOne("BackendApp.Models.User", "User")
                        .WithMany("OneTimeTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("one_time_tokens_user_id_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackendApp.Models.OrdenDetalle", b =>
                {
                    b.HasOne("BackendApp.Models.Ordene", "IdOrdenNavigation")
                        .WithMany("OrdenDetalles")
                        .HasForeignKey("IdOrden")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_orden_detalle_orden");

                    b.HasOne("BackendApp.Models.Producto", "IdProductoNavigation")
                        .WithMany("OrdenDetalles")
                        .HasForeignKey("IdProducto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_orden_detalle_producto");

                    b.Navigation("IdOrdenNavigation");

                    b.Navigation("IdProductoNavigation");
                });

            modelBuilder.Entity("BackendApp.Models.Pedido", b =>
                {
                    b.HasOne("BackendApp.Models.Ordene", "IdOrdenNavigation")
                        .WithMany("Pedidos")
                        .HasForeignKey("IdOrden")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_pedidos_orden");

                    b.HasOne("BackendApp.Models.Proveedore", "IdProveedorNavigation")
                        .WithMany("Pedidos")
                        .HasForeignKey("IdProveedor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_pedidos_proveedor");

                    b.Navigation("IdOrdenNavigation");

                    b.Navigation("IdProveedorNavigation");
                });

            modelBuilder.Entity("BackendApp.Models.PedidoDetalle", b =>
                {
                    b.HasOne("BackendApp.Models.Pedido", "IdPedidoNavigation")
                        .WithMany("PedidoDetalles")
                        .HasForeignKey("IdPedido")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_pedido_detalles_pedido");

                    b.HasOne("BackendApp.Models.Producto", "IdProductoNavigation")
                        .WithMany("PedidoDetalles")
                        .HasForeignKey("IdProducto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_pedido_detalles_producto");

                    b.Navigation("IdPedidoNavigation");

                    b.Navigation("IdProductoNavigation");
                });

            modelBuilder.Entity("BackendApp.Models.Personal", b =>
                {
                    b.HasOne("BackendApp.Models.Role", "IdRolNavigation")
                        .WithMany("Personals")
                        .HasForeignKey("IdRol")
                        .HasConstraintName("personal_id_rol_fkey");

                    b.HasOne("BackendApp.Models.Usuario", "IdUserNavigation")
                        .WithMany("Personals")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("personal_id_user_fkey");

                    b.Navigation("IdRolNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("BackendApp.Models.Precio", b =>
                {
                    b.HasOne("BackendApp.Models.Producto", "IdProductoNavigation")
                        .WithMany("Precios")
                        .HasForeignKey("IdProducto")
                        .HasConstraintName("precios_id_producto_fkey");

                    b.Navigation("IdProductoNavigation");
                });

            modelBuilder.Entity("BackendApp.Models.Presupuesto", b =>
                {
                    b.HasOne("BackendApp.Models.Proveedore", "IdProveedorNavigation")
                        .WithMany("Presupuestos")
                        .HasForeignKey("IdProveedor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_presupuestos_proveedor");

                    b.Navigation("IdProveedorNavigation");
                });

            modelBuilder.Entity("BackendApp.Models.PresupuestoDetalle", b =>
                {
                    b.HasOne("BackendApp.Models.Presupuesto", "IdPresupuestoNavigation")
                        .WithMany("PresupuestoDetalles")
                        .HasForeignKey("IdPresupuesto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_pd_presupuesto");

                    b.HasOne("BackendApp.Models.Producto", "IdProductoNavigation")
                        .WithMany("PresupuestoDetalles")
                        .HasForeignKey("IdProducto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_pd_producto");

                    b.Navigation("IdPresupuestoNavigation");

                    b.Navigation("IdProductoNavigation");
                });

            modelBuilder.Entity("BackendApp.Models.PresupuestosProveedore", b =>
                {
                    b.HasOne("BackendApp.Models.Proveedore", "Proveedor")
                        .WithMany("PresupuestosProveedores")
                        .HasForeignKey("ProveedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_proveedor");

                    b.Navigation("Proveedor");
                });

            modelBuilder.Entity("BackendApp.Models.Producto", b =>
                {
                    b.HasOne("BackendApp.Models.Categorium", "IdCategoriaNavigation")
                        .WithMany("Productos")
                        .HasForeignKey("IdCategoria")
                        .HasConstraintName("productos_id_categoria_fkey");

                    b.HasOne("BackendApp.Models.Stock", "IdStockNavigation")
                        .WithMany("Productos")
                        .HasForeignKey("IdStock")
                        .HasConstraintName("productos_id_stock_fkey");

                    b.Navigation("IdCategoriaNavigation");

                    b.Navigation("IdStockNavigation");
                });

            modelBuilder.Entity("BackendApp.Models.ProductoProveedor", b =>
                {
                    b.HasOne("BackendApp.Models.Producto", "IdProductoNavigation")
                        .WithMany("ProductoProveedors")
                        .HasForeignKey("IdProducto")
                        .HasConstraintName("producto_proveedor_id_producto_fkey");

                    b.HasOne("BackendApp.Models.Proveedore", "IdProveedorNavigation")
                        .WithMany("ProductoProveedors")
                        .HasForeignKey("IdProveedor")
                        .HasConstraintName("producto_proveedor_id_proveedor_fkey");

                    b.Navigation("IdProductoNavigation");

                    b.Navigation("IdProveedorNavigation");
                });

            modelBuilder.Entity("BackendApp.Models.Recepcion", b =>
                {
                    b.HasOne("BackendApp.Models.Ordene", "IdOrdenNavigation")
                        .WithMany("Recepcions")
                        .HasForeignKey("IdOrden")
                        .IsRequired()
                        .HasConstraintName("fk_recepcion_orden");

                    b.HasOne("BackendApp.Models.Pedido", "IdPedidoNavigation")
                        .WithMany("Recepcions")
                        .HasForeignKey("IdPedido")
                        .IsRequired()
                        .HasConstraintName("fk_recepcion_pedido");

                    b.Navigation("IdOrdenNavigation");

                    b.Navigation("IdPedidoNavigation");
                });

            modelBuilder.Entity("BackendApp.Models.RecepcionDetalle", b =>
                {
                    b.HasOne("BackendApp.Models.Producto", "IdProductoNavigation")
                        .WithMany("RecepcionDetalles")
                        .HasForeignKey("IdProducto")
                        .IsRequired()
                        .HasConstraintName("recepcion_detalle_id_producto_fkey");

                    b.HasOne("BackendApp.Models.Recepcion", "IdRecepcionNavigation")
                        .WithMany("RecepcionDetalles")
                        .HasForeignKey("IdRecepcion")
                        .IsRequired()
                        .HasConstraintName("recepcion_detalle_id_recepcion_fkey");

                    b.Navigation("IdProductoNavigation");

                    b.Navigation("IdRecepcionNavigation");
                });

            modelBuilder.Entity("BackendApp.Models.RefreshToken", b =>
                {
                    b.HasOne("BackendApp.Models.Session", "Session")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("refresh_tokens_session_id_fkey");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("BackendApp.Models.S3MultipartUpload", b =>
                {
                    b.HasOne("BackendApp.Models.Bucket", "Bucket")
                        .WithMany("S3MultipartUploads")
                        .HasForeignKey("BucketId")
                        .IsRequired()
                        .HasConstraintName("s3_multipart_uploads_bucket_id_fkey");

                    b.Navigation("Bucket");
                });

            modelBuilder.Entity("BackendApp.Models.S3MultipartUploadsPart", b =>
                {
                    b.HasOne("BackendApp.Models.Bucket", "Bucket")
                        .WithMany("S3MultipartUploadsParts")
                        .HasForeignKey("BucketId")
                        .IsRequired()
                        .HasConstraintName("s3_multipart_uploads_parts_bucket_id_fkey");

                    b.HasOne("BackendApp.Models.S3MultipartUpload", "Upload")
                        .WithMany("S3MultipartUploadsParts")
                        .HasForeignKey("UploadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("s3_multipart_uploads_parts_upload_id_fkey");

                    b.Navigation("Bucket");

                    b.Navigation("Upload");
                });

            modelBuilder.Entity("BackendApp.Models.SamlProvider", b =>
                {
                    b.HasOne("BackendApp.Models.SsoProvider", "SsoProvider")
                        .WithMany("SamlProviders")
                        .HasForeignKey("SsoProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("saml_providers_sso_provider_id_fkey");

                    b.Navigation("SsoProvider");
                });

            modelBuilder.Entity("BackendApp.Models.SamlRelayState", b =>
                {
                    b.HasOne("BackendApp.Models.FlowState", "FlowState")
                        .WithMany("SamlRelayStates")
                        .HasForeignKey("FlowStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("saml_relay_states_flow_state_id_fkey");

                    b.HasOne("BackendApp.Models.SsoProvider", "SsoProvider")
                        .WithMany("SamlRelayStates")
                        .HasForeignKey("SsoProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("saml_relay_states_sso_provider_id_fkey");

                    b.Navigation("FlowState");

                    b.Navigation("SsoProvider");
                });

            modelBuilder.Entity("BackendApp.Models.ServiciosProductosUtilizado", b =>
                {
                    b.HasOne("BackendApp.Models.Producto", "IdProductoNavigation")
                        .WithMany("ServiciosProductosUtilizados")
                        .HasForeignKey("IdProducto")
                        .HasConstraintName("servicios_productos_utilizados_id_producto_fkey");

                    b.HasOne("BackendApp.Models.ServiciosRealizado", "IdServicioRealizadoNavigation")
                        .WithMany("ServiciosProductosUtilizados")
                        .HasForeignKey("IdServicioRealizado")
                        .HasConstraintName("servicios_productos_utilizados_id_servicio_realizado_fkey");

                    b.Navigation("IdProductoNavigation");

                    b.Navigation("IdServicioRealizadoNavigation");
                });

            modelBuilder.Entity("BackendApp.Models.ServiciosRealizado", b =>
                {
                    b.HasOne("BackendApp.Models.Personal", "IdPersonalNavigation")
                        .WithMany("ServiciosRealizados")
                        .HasForeignKey("IdPersonal")
                        .HasConstraintName("servicios_realizados_id_personal_fkey");

                    b.HasOne("BackendApp.Models.Servicio", "IdServicioNavigation")
                        .WithMany("ServiciosRealizados")
                        .HasForeignKey("IdServicio")
                        .HasConstraintName("servicios_realizados_id_servicio_fkey");

                    b.Navigation("IdPersonalNavigation");

                    b.Navigation("IdServicioNavigation");
                });

            modelBuilder.Entity("BackendApp.Models.Session", b =>
                {
                    b.HasOne("BackendApp.Models.User", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("sessions_user_id_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackendApp.Models.SsoDomain", b =>
                {
                    b.HasOne("BackendApp.Models.SsoProvider", "SsoProvider")
                        .WithMany("SsoDomains")
                        .HasForeignKey("SsoProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("sso_domains_sso_provider_id_fkey");

                    b.Navigation("SsoProvider");
                });

            modelBuilder.Entity("BackendApp.Models.Stock", b =>
                {
                    b.HasOne("BackendApp.Models.Personal", "IdPersonalNavigation")
                        .WithMany("Stocks")
                        .HasForeignKey("IdPersonal")
                        .HasConstraintName("stock_id_personal_fkey");

                    b.Navigation("IdPersonalNavigation");
                });

            modelBuilder.Entity("BackendApp.Models.AjustesStock", b =>
                {
                    b.Navigation("DetalleAjusteStocks");
                });

            modelBuilder.Entity("BackendApp.Models.Bucket", b =>
                {
                    b.Navigation("Objects");

                    b.Navigation("S3MultipartUploads");

                    b.Navigation("S3MultipartUploadsParts");
                });

            modelBuilder.Entity("BackendApp.Models.Categorium", b =>
                {
                    b.Navigation("CategoriaProveedors");

                    b.Navigation("Productos");
                });

            modelBuilder.Entity("BackendApp.Models.Factura", b =>
                {
                    b.Navigation("FacturaDetalles");

                    b.Navigation("NotasCreditos");
                });

            modelBuilder.Entity("BackendApp.Models.FlowState", b =>
                {
                    b.Navigation("SamlRelayStates");
                });

            modelBuilder.Entity("BackendApp.Models.MfaFactor", b =>
                {
                    b.Navigation("MfaChallenges");
                });

            modelBuilder.Entity("BackendApp.Models.NotasCredito", b =>
                {
                    b.Navigation("Asientos");

                    b.Navigation("NotaCreditoDetalles");
                });

            modelBuilder.Entity("BackendApp.Models.Ordene", b =>
                {
                    b.Navigation("Asientos");

                    b.Navigation("OrdenDetalles");

                    b.Navigation("Pedidos");

                    b.Navigation("Recepcions");
                });

            modelBuilder.Entity("BackendApp.Models.Pedido", b =>
                {
                    b.Navigation("Facturas");

                    b.Navigation("NotaDeDevolucions");

                    b.Navigation("PedidoDetalles");

                    b.Navigation("Recepcions");
                });

            modelBuilder.Entity("BackendApp.Models.Personal", b =>
                {
                    b.Navigation("AjustesStocks");

                    b.Navigation("ServiciosRealizados");

                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("BackendApp.Models.Presupuesto", b =>
                {
                    b.Navigation("PresupuestoDetalles");
                });

            modelBuilder.Entity("BackendApp.Models.Producto", b =>
                {
                    b.Navigation("BajasProductos");

                    b.Navigation("DetalleAjusteStocks");

                    b.Navigation("FacturaDetalles");

                    b.Navigation("NotaCreditoDetalles");

                    b.Navigation("NotaDeDevolucions");

                    b.Navigation("OrdenDetalles");

                    b.Navigation("PedidoDetalles");

                    b.Navigation("Precios");

                    b.Navigation("PresupuestoDetalles");

                    b.Navigation("ProductoProveedors");

                    b.Navigation("RecepcionDetalles");

                    b.Navigation("ServiciosProductosUtilizados");
                });

            modelBuilder.Entity("BackendApp.Models.Proveedore", b =>
                {
                    b.Navigation("Asientos");

                    b.Navigation("CategoriaProveedors");

                    b.Navigation("ContadorFactura");

                    b.Navigation("Facturas");

                    b.Navigation("NotasCreditos");

                    b.Navigation("Pedidos");

                    b.Navigation("Presupuestos");

                    b.Navigation("PresupuestosProveedores");

                    b.Navigation("ProductoProveedors");
                });

            modelBuilder.Entity("BackendApp.Models.Recepcion", b =>
                {
                    b.Navigation("RecepcionDetalles");
                });

            modelBuilder.Entity("BackendApp.Models.Role", b =>
                {
                    b.Navigation("Personals");
                });

            modelBuilder.Entity("BackendApp.Models.S3MultipartUpload", b =>
                {
                    b.Navigation("S3MultipartUploadsParts");
                });

            modelBuilder.Entity("BackendApp.Models.Servicio", b =>
                {
                    b.Navigation("ServiciosRealizados");
                });

            modelBuilder.Entity("BackendApp.Models.ServiciosRealizado", b =>
                {
                    b.Navigation("ServiciosProductosUtilizados");
                });

            modelBuilder.Entity("BackendApp.Models.Session", b =>
                {
                    b.Navigation("MfaAmrClaims");

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("BackendApp.Models.SsoProvider", b =>
                {
                    b.Navigation("SamlProviders");

                    b.Navigation("SamlRelayStates");

                    b.Navigation("SsoDomains");
                });

            modelBuilder.Entity("BackendApp.Models.Stock", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("BackendApp.Models.User", b =>
                {
                    b.Navigation("Identities");

                    b.Navigation("MfaFactors");

                    b.Navigation("OneTimeTokens");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("BackendApp.Models.Usuario", b =>
                {
                    b.Navigation("Personals");
                });
#pragma warning restore 612, 618
        }
    }
}
